/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface PrivateLaunchpadInterface extends ethers.utils.Interface {
  functions: {
    "Token()": FunctionFragment;
    "TokenCap()": FunctionFragment;
    "USDC()": FunctionFragment;
    "USDCap()": FunctionFragment;
    "addMultiWhitelist(address[])": FunctionFragment;
    "addWhitelistAdmin(address)": FunctionFragment;
    "addWhitelisted(address)": FunctionFragment;
    "buyToken(uint256)": FunctionFragment;
    "endTime()": FunctionFragment;
    "fundWallet()": FunctionFragment;
    "isWhite()": FunctionFragment;
    "isWhitelistAdmin(address)": FunctionFragment;
    "isWhitelisted(address)": FunctionFragment;
    "lockEndTime()": FunctionFragment;
    "lockRate()": FunctionFragment;
    "lockTime()": FunctionFragment;
    "maxGasPrice()": FunctionFragment;
    "owner()": FunctionFragment;
    "paused()": FunctionFragment;
    "personCap()": FunctionFragment;
    "personMinCap()": FunctionFragment;
    "rate()": FunctionFragment;
    "removeWhitelisted(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "renounceWhitelistAdmin()": FunctionFragment;
    "renounceWhitelisted()": FunctionFragment;
    "startTime()": FunctionFragment;
    "tokenBought()": FunctionFragment;
    "tokenLocked()": FunctionFragment;
    "tokenWallet()": FunctionFragment;
    "totalTokenRaised()": FunctionFragment;
    "totalUSDRaised()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "userBought(address)": FunctionFragment;
    "userLocked(address)": FunctionFragment;
    "userTotalToken(address)": FunctionFragment;
    "userUnLocked(address)": FunctionFragment;
    "withdraw()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "Token", values?: undefined): string;
  encodeFunctionData(functionFragment: "TokenCap", values?: undefined): string;
  encodeFunctionData(functionFragment: "USDC", values?: undefined): string;
  encodeFunctionData(functionFragment: "USDCap", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addMultiWhitelist",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "addWhitelistAdmin",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "addWhitelisted",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "buyToken",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "endTime", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "fundWallet",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isWhite", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isWhitelistAdmin",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isWhitelisted",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "lockEndTime",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "lockRate", values?: undefined): string;
  encodeFunctionData(functionFragment: "lockTime", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "maxGasPrice",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(functionFragment: "personCap", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "personMinCap",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "rate", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeWhitelisted",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceWhitelistAdmin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceWhitelisted",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "startTime", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenBought",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenLocked",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenWallet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalTokenRaised",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalUSDRaised",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "userBought", values: [string]): string;
  encodeFunctionData(functionFragment: "userLocked", values: [string]): string;
  encodeFunctionData(
    functionFragment: "userTotalToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "userUnLocked",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;

  decodeFunctionResult(functionFragment: "Token", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "TokenCap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "USDC", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "USDCap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addMultiWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addWhitelistAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addWhitelisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "buyToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "endTime", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fundWallet", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isWhite", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isWhitelistAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isWhitelisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockEndTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lockRate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lockTime", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxGasPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "personCap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "personMinCap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeWhitelisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceWhitelistAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceWhitelisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "startTime", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenBought",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenLocked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalTokenRaised",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalUSDRaised",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userBought", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "userLocked", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "userTotalToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userUnLocked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "Unpaused(address)": EventFragment;
    "WhitelistAdminAdded(address)": EventFragment;
    "WhitelistAdminRemoved(address)": EventFragment;
    "WhitelistedAdded(address)": EventFragment;
    "WhitelistedRemoved(address)": EventFragment;
    "tokenTotal(uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WhitelistAdminAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WhitelistAdminRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WhitelistedAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WhitelistedRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "tokenTotal"): EventFragment;
}

export class PrivateLaunchpad extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: PrivateLaunchpadInterface;

  functions: {
    Token(overrides?: CallOverrides): Promise<[string]>;

    TokenCap(overrides?: CallOverrides): Promise<[BigNumber]>;

    USDC(overrides?: CallOverrides): Promise<[string]>;

    USDCap(overrides?: CallOverrides): Promise<[BigNumber]>;

    addMultiWhitelist(
      addresses: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addWhitelistAdmin(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addWhitelisted(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    buyToken(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    endTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    fundWallet(overrides?: CallOverrides): Promise<[string]>;

    isWhite(overrides?: CallOverrides): Promise<[boolean]>;

    isWhitelistAdmin(
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isWhitelisted(
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    lockEndTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    lockRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    lockTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxGasPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    personCap(overrides?: CallOverrides): Promise<[BigNumber]>;

    personMinCap(overrides?: CallOverrides): Promise<[BigNumber]>;

    rate(overrides?: CallOverrides): Promise<[BigNumber]>;

    removeWhitelisted(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceWhitelistAdmin(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceWhitelisted(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    startTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    tokenBought(overrides?: CallOverrides): Promise<[BigNumber]>;

    tokenLocked(overrides?: CallOverrides): Promise<[BigNumber]>;

    tokenWallet(overrides?: CallOverrides): Promise<[string]>;

    totalTokenRaised(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalUSDRaised(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    userBought(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    userLocked(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    userTotalToken(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    userUnLocked(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  Token(overrides?: CallOverrides): Promise<string>;

  TokenCap(overrides?: CallOverrides): Promise<BigNumber>;

  USDC(overrides?: CallOverrides): Promise<string>;

  USDCap(overrides?: CallOverrides): Promise<BigNumber>;

  addMultiWhitelist(
    addresses: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addWhitelistAdmin(
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addWhitelisted(
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  buyToken(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  endTime(overrides?: CallOverrides): Promise<BigNumber>;

  fundWallet(overrides?: CallOverrides): Promise<string>;

  isWhite(overrides?: CallOverrides): Promise<boolean>;

  isWhitelistAdmin(
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isWhitelisted(account: string, overrides?: CallOverrides): Promise<boolean>;

  lockEndTime(overrides?: CallOverrides): Promise<BigNumber>;

  lockRate(overrides?: CallOverrides): Promise<BigNumber>;

  lockTime(overrides?: CallOverrides): Promise<BigNumber>;

  maxGasPrice(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  personCap(overrides?: CallOverrides): Promise<BigNumber>;

  personMinCap(overrides?: CallOverrides): Promise<BigNumber>;

  rate(overrides?: CallOverrides): Promise<BigNumber>;

  removeWhitelisted(
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceWhitelistAdmin(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceWhitelisted(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  startTime(overrides?: CallOverrides): Promise<BigNumber>;

  tokenBought(overrides?: CallOverrides): Promise<BigNumber>;

  tokenLocked(overrides?: CallOverrides): Promise<BigNumber>;

  tokenWallet(overrides?: CallOverrides): Promise<string>;

  totalTokenRaised(overrides?: CallOverrides): Promise<BigNumber>;

  totalUSDRaised(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  userBought(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  userLocked(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  userTotalToken(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  userUnLocked(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  withdraw(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    Token(overrides?: CallOverrides): Promise<string>;

    TokenCap(overrides?: CallOverrides): Promise<BigNumber>;

    USDC(overrides?: CallOverrides): Promise<string>;

    USDCap(overrides?: CallOverrides): Promise<BigNumber>;

    addMultiWhitelist(
      addresses: string[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    addWhitelistAdmin(
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addWhitelisted(account: string, overrides?: CallOverrides): Promise<void>;

    buyToken(amount: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    endTime(overrides?: CallOverrides): Promise<BigNumber>;

    fundWallet(overrides?: CallOverrides): Promise<string>;

    isWhite(overrides?: CallOverrides): Promise<boolean>;

    isWhitelistAdmin(
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isWhitelisted(account: string, overrides?: CallOverrides): Promise<boolean>;

    lockEndTime(overrides?: CallOverrides): Promise<BigNumber>;

    lockRate(overrides?: CallOverrides): Promise<BigNumber>;

    lockTime(overrides?: CallOverrides): Promise<BigNumber>;

    maxGasPrice(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    personCap(overrides?: CallOverrides): Promise<BigNumber>;

    personMinCap(overrides?: CallOverrides): Promise<BigNumber>;

    rate(overrides?: CallOverrides): Promise<BigNumber>;

    removeWhitelisted(
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    renounceWhitelistAdmin(overrides?: CallOverrides): Promise<void>;

    renounceWhitelisted(overrides?: CallOverrides): Promise<void>;

    startTime(overrides?: CallOverrides): Promise<BigNumber>;

    tokenBought(overrides?: CallOverrides): Promise<BigNumber>;

    tokenLocked(overrides?: CallOverrides): Promise<BigNumber>;

    tokenWallet(overrides?: CallOverrides): Promise<string>;

    totalTokenRaised(overrides?: CallOverrides): Promise<BigNumber>;

    totalUSDRaised(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    userBought(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    userLocked(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    userTotalToken(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    userUnLocked(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    Paused(account?: null): TypedEventFilter<[string], { account: string }>;

    Unpaused(account?: null): TypedEventFilter<[string], { account: string }>;

    WhitelistAdminAdded(
      account?: string | null
    ): TypedEventFilter<[string], { account: string }>;

    WhitelistAdminRemoved(
      account?: string | null
    ): TypedEventFilter<[string], { account: string }>;

    WhitelistedAdded(
      account?: string | null
    ): TypedEventFilter<[string], { account: string }>;

    WhitelistedRemoved(
      account?: string | null
    ): TypedEventFilter<[string], { account: string }>;

    tokenTotal(
      totalUSDRaised?: BigNumberish | null,
      totalTokenRaised?: BigNumberish | null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { totalUSDRaised: BigNumber; totalTokenRaised: BigNumber }
    >;
  };

  estimateGas: {
    Token(overrides?: CallOverrides): Promise<BigNumber>;

    TokenCap(overrides?: CallOverrides): Promise<BigNumber>;

    USDC(overrides?: CallOverrides): Promise<BigNumber>;

    USDCap(overrides?: CallOverrides): Promise<BigNumber>;

    addMultiWhitelist(
      addresses: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addWhitelistAdmin(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addWhitelisted(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    buyToken(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    endTime(overrides?: CallOverrides): Promise<BigNumber>;

    fundWallet(overrides?: CallOverrides): Promise<BigNumber>;

    isWhite(overrides?: CallOverrides): Promise<BigNumber>;

    isWhitelistAdmin(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isWhitelisted(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lockEndTime(overrides?: CallOverrides): Promise<BigNumber>;

    lockRate(overrides?: CallOverrides): Promise<BigNumber>;

    lockTime(overrides?: CallOverrides): Promise<BigNumber>;

    maxGasPrice(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    personCap(overrides?: CallOverrides): Promise<BigNumber>;

    personMinCap(overrides?: CallOverrides): Promise<BigNumber>;

    rate(overrides?: CallOverrides): Promise<BigNumber>;

    removeWhitelisted(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceWhitelistAdmin(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceWhitelisted(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    startTime(overrides?: CallOverrides): Promise<BigNumber>;

    tokenBought(overrides?: CallOverrides): Promise<BigNumber>;

    tokenLocked(overrides?: CallOverrides): Promise<BigNumber>;

    tokenWallet(overrides?: CallOverrides): Promise<BigNumber>;

    totalTokenRaised(overrides?: CallOverrides): Promise<BigNumber>;

    totalUSDRaised(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    userBought(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    userLocked(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    userTotalToken(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    userUnLocked(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    Token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    TokenCap(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    USDC(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    USDCap(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addMultiWhitelist(
      addresses: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addWhitelistAdmin(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addWhitelisted(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    buyToken(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    endTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fundWallet(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isWhite(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isWhitelistAdmin(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isWhitelisted(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lockEndTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lockRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lockTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxGasPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    personCap(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    personMinCap(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeWhitelisted(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceWhitelistAdmin(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceWhitelisted(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    startTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenBought(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenLocked(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenWallet(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalTokenRaised(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalUSDRaised(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    userBought(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userLocked(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userTotalToken(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userUnLocked(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
