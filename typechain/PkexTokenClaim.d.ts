/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface PkexTokenClaimInterface extends ethers.utils.Interface {
  functions: {
    "Tokenamount()": FunctionFragment;
    "addMultiVestingInMultiAddress(address[],uint256[],uint256[])": FunctionFragment;
    "addMultiVestingInOneAddress(address,uint256[],uint256[])": FunctionFragment;
    "addVesting(address,uint256,uint256)": FunctionFragment;
    "multiRelease(uint256[])": FunctionFragment;
    "myNextRelease()": FunctionFragment;
    "myTokens()": FunctionFragment;
    "myVestings()": FunctionFragment;
    "owner()": FunctionFragment;
    "release(uint256)": FunctionFragment;
    "releaseAll()": FunctionFragment;
    "removeVesting(uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "retrieveExcessTokens(uint256)": FunctionFragment;
    "token()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "vestings(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "Tokenamount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addMultiVestingInMultiAddress",
    values: [string[], BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "addMultiVestingInOneAddress",
    values: [string, BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "addVesting",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "multiRelease",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "myNextRelease",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "myTokens", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "myVestings",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "release",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "releaseAll",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeVesting",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "retrieveExcessTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "vestings",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "Tokenamount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addMultiVestingInMultiAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addMultiVestingInOneAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addVesting", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "multiRelease",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "myNextRelease",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "myTokens", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "myVestings", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "release", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "releaseAll", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeVesting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "retrieveExcessTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vestings", data: BytesLike): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "TokenVestingAdded(uint256,address,uint256)": EventFragment;
    "TokenVestingReleased(uint256,address,uint256)": EventFragment;
    "TokenVestingRemoved(uint256,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenVestingAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenVestingReleased"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenVestingRemoved"): EventFragment;
}

export class PkexTokenClaim extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: PkexTokenClaimInterface;

  functions: {
    Tokenamount(overrides?: CallOverrides): Promise<[BigNumber]>;

    addMultiVestingInMultiAddress(
      _beneficiaries: string[],
      _releaseTimes: BigNumberish[],
      _amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addMultiVestingInOneAddress(
      _beneficiary: string,
      _releaseTimes: BigNumberish[],
      _amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addVesting(
      _beneficiary: string,
      _releaseTime: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    multiRelease(
      _vestingIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    myNextRelease(
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber, BigNumber, boolean] & {
          vestingId: BigNumber;
          releaseTime: BigNumber;
          amount: BigNumber;
          released: boolean;
        }
      ] & {
        vesting: [BigNumber, BigNumber, BigNumber, boolean] & {
          vestingId: BigNumber;
          releaseTime: BigNumber;
          amount: BigNumber;
          released: boolean;
        };
      }
    >;

    myTokens(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        total: BigNumber;
        claimed: BigNumber;
        available: BigNumber;
        unclaimed: BigNumber;
      }
    >;

    myVestings(
      overrides?: CallOverrides
    ): Promise<
      [
        ([BigNumber, BigNumber, BigNumber, boolean] & {
          vestingId: BigNumber;
          releaseTime: BigNumber;
          amount: BigNumber;
          released: boolean;
        })[]
      ]
    >;

    owner(overrides?: CallOverrides): Promise<[string]>;

    release(
      _vestingId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    releaseAll(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeVesting(
      _vestingId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    retrieveExcessTokens(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    token(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    vestings(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, boolean] & {
        vestingId: BigNumber;
        releaseTime: BigNumber;
        amount: BigNumber;
        released: boolean;
      }
    >;
  };

  Tokenamount(overrides?: CallOverrides): Promise<BigNumber>;

  addMultiVestingInMultiAddress(
    _beneficiaries: string[],
    _releaseTimes: BigNumberish[],
    _amounts: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addMultiVestingInOneAddress(
    _beneficiary: string,
    _releaseTimes: BigNumberish[],
    _amounts: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addVesting(
    _beneficiary: string,
    _releaseTime: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  multiRelease(
    _vestingIds: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  myNextRelease(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, boolean] & {
      vestingId: BigNumber;
      releaseTime: BigNumber;
      amount: BigNumber;
      released: boolean;
    }
  >;

  myTokens(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      total: BigNumber;
      claimed: BigNumber;
      available: BigNumber;
      unclaimed: BigNumber;
    }
  >;

  myVestings(
    overrides?: CallOverrides
  ): Promise<
    ([BigNumber, BigNumber, BigNumber, boolean] & {
      vestingId: BigNumber;
      releaseTime: BigNumber;
      amount: BigNumber;
      released: boolean;
    })[]
  >;

  owner(overrides?: CallOverrides): Promise<string>;

  release(
    _vestingId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  releaseAll(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeVesting(
    _vestingId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  retrieveExcessTokens(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  token(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  vestings(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, boolean] & {
      vestingId: BigNumber;
      releaseTime: BigNumber;
      amount: BigNumber;
      released: boolean;
    }
  >;

  callStatic: {
    Tokenamount(overrides?: CallOverrides): Promise<BigNumber>;

    addMultiVestingInMultiAddress(
      _beneficiaries: string[],
      _releaseTimes: BigNumberish[],
      _amounts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    addMultiVestingInOneAddress(
      _beneficiary: string,
      _releaseTimes: BigNumberish[],
      _amounts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    addVesting(
      _beneficiary: string,
      _releaseTime: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    multiRelease(
      _vestingIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    myNextRelease(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, boolean] & {
        vestingId: BigNumber;
        releaseTime: BigNumber;
        amount: BigNumber;
        released: boolean;
      }
    >;

    myTokens(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        total: BigNumber;
        claimed: BigNumber;
        available: BigNumber;
        unclaimed: BigNumber;
      }
    >;

    myVestings(
      overrides?: CallOverrides
    ): Promise<
      ([BigNumber, BigNumber, BigNumber, boolean] & {
        vestingId: BigNumber;
        releaseTime: BigNumber;
        amount: BigNumber;
        released: boolean;
      })[]
    >;

    owner(overrides?: CallOverrides): Promise<string>;

    release(_vestingId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    releaseAll(overrides?: CallOverrides): Promise<void>;

    removeVesting(
      _vestingId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    retrieveExcessTokens(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    token(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    vestings(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, boolean] & {
        vestingId: BigNumber;
        releaseTime: BigNumber;
        amount: BigNumber;
        released: boolean;
      }
    >;
  };

  filters: {
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    TokenVestingAdded(
      vestingId?: BigNumberish | null,
      beneficiary?: string | null,
      amount?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber],
      { vestingId: BigNumber; beneficiary: string; amount: BigNumber }
    >;

    TokenVestingReleased(
      vestingId?: BigNumberish | null,
      beneficiary?: string | null,
      amount?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber],
      { vestingId: BigNumber; beneficiary: string; amount: BigNumber }
    >;

    TokenVestingRemoved(
      vestingId?: BigNumberish | null,
      beneficiary?: string | null,
      amount?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber],
      { vestingId: BigNumber; beneficiary: string; amount: BigNumber }
    >;
  };

  estimateGas: {
    Tokenamount(overrides?: CallOverrides): Promise<BigNumber>;

    addMultiVestingInMultiAddress(
      _beneficiaries: string[],
      _releaseTimes: BigNumberish[],
      _amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addMultiVestingInOneAddress(
      _beneficiary: string,
      _releaseTimes: BigNumberish[],
      _amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addVesting(
      _beneficiary: string,
      _releaseTime: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    multiRelease(
      _vestingIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    myNextRelease(overrides?: CallOverrides): Promise<BigNumber>;

    myTokens(overrides?: CallOverrides): Promise<BigNumber>;

    myVestings(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    release(
      _vestingId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    releaseAll(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeVesting(
      _vestingId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    retrieveExcessTokens(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    vestings(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    Tokenamount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addMultiVestingInMultiAddress(
      _beneficiaries: string[],
      _releaseTimes: BigNumberish[],
      _amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addMultiVestingInOneAddress(
      _beneficiary: string,
      _releaseTimes: BigNumberish[],
      _amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addVesting(
      _beneficiary: string,
      _releaseTime: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    multiRelease(
      _vestingIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    myNextRelease(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    myTokens(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    myVestings(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    release(
      _vestingId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    releaseAll(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeVesting(
      _vestingId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    retrieveExcessTokens(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    vestings(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
